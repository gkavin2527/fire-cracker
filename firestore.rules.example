
rules_version = '2';

// Default deny all access to prevent unintentional access to data
// Specific rules below will grant necessary permissions.
// service cloud.firestore {
//   match /databases/{database}/documents {
//     match /{document=**} {
//       allow read, write: if false;
//     }
//   }
// }

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    // IMPORTANT: Replace "YOUR_ADMIN_USER_UID_HERE" with your actual Firebase Admin User UID(s)
    // For multiple admins, you can use an array: request.auth.uid in ["UID1", "UID2"]
    function isAdmin() {
      return request.auth != null && request.auth.uid == "YOUR_ADMIN_USER_UID_HERE";
      // Example for specific email (less secure if email can be changed, UID is better):
      // return request.auth != null && request.auth.token.email == "admin@example.com";
    }

    // Products: Public read, Admin write/delete
    match /products/{productId} {
      allow read: if true; // Everyone can read products
      allow create, update, delete: if isAdmin(); // Only admins can create, update, or delete products
    }

    // Categories: Public read, Admin write/delete
    match /categories/{categoryId} {
      allow read: if true; // Everyone can read categories
      allow create, update, delete: if isAdmin(); // Only admins can create, update, or delete categories
    }
    
    // Hero Images: Public read, Admin write/delete
    match /heroImages/{heroImageId} {
      allow read: if true; // Everyone can read hero images
      allow create, update, delete: if isAdmin(); // Only admins can manage hero images
    }

    // Users: Authenticated users can read and write their OWN profile. Admins can read any profile.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow create, update: if request.auth != null && request.auth.uid == userId;
      // Delete might be restricted or admin-only depending on app requirements
      // allow delete: if isAdmin(); 
    }

    // Orders:
    // - Users can create their own orders.
    // - Users can read their own orders.
    // - Users can update the status of their own orders IF the current status allows cancellation (e.g. Pending/Processing).
    // - Admins can read and update any order.
    match /orders/{orderId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow update: if 
        (request.auth != null && resource.data.userId == request.auth.uid && 
          (resource.data.status == 'Pending' || resource.data.status == 'Processing') && 
          request.resource.data.status == 'Cancelled') // User can only cancel if pending/processing
        || isAdmin(); // Admin can update any field, including status
      // No delete for orders typically, mark as cancelled instead.
      // allow delete: if isAdmin(); 
    }
  }
}
